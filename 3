<!doctype html>
<html lang="vi">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>Tr√≤ vui theo t√™n (safe)</title>
  <script src="config.js"></script>
  <style>
    body{margin:0;min-height:100svh;display:grid;place-items:center;background:#0b1220;color:#e5e7eb;font:16px/1.6 system-ui,Arial}
    .card{max-width:720px;width:100%;margin:24px;padding:24px;border-radius:16px;border:1px solid rgba(148,163,184,.2);background:rgba(255,255,255,.03)}
    h1{margin:0 0 8px}
    label,input,button{display:block;width:100%}
    input{margin-top:6px;padding:10px;border-radius:10px;border:1px solid rgba(148,163,184,.35);background:transparent;color:inherit}
    button{margin-top:12px;padding:12px;border-radius:999px;border:0;background:#06b6d4;color:#001;font-weight:700;cursor:pointer}
    .result{margin-top:14px;padding:12px;border-radius:10px;background:rgba(255,255,255,.04);min-height:48px}
    .muted{color:#94a3b8}
    a{color:#7dd3fc}
  </style>
</head>
<body>
  <main class="card">
    <h1>Tr√≤ vui theo t√™n (safe)</h1>
    <p class="muted">N·ªôi dung vui v·∫ª, v√¥ h·∫°i. Kh√¥ng d√πng ƒë·ªÉ x√∫c ph·∫°m ng∆∞·ªùi kh√°c.</p>
    <label>Nh·∫≠p t√™n ho·∫∑c nickname
      <input id="name" placeholder="V√≠ d·ª•: H√πng Heo" />
    </label>
    <button id="go">T·∫°o c√¢u</button>
    <div id="res" class="result" aria-live="polite"></div>
    <p>‚Ü©Ô∏è <a href="index.html">V·ªÅ trang ch√≠nh</a></p>
  </main>

  <script>
    function localSafeLine(name){
      const templates = [
        n => `${n} l√†m Wi-Fi c≈©ng ph·∫£i xin ph√©p k·∫øt n·ªëi tr∆∞·ªõc üòÑ`,
        n => `Nghe ƒë·ªìn ${n} c·∫ßm ly c√† ph√™ l√† deadline t·ª± tan ch·∫£y!`,
        n => `${n} b∆∞·ªõc v√†o ph√≤ng, con chu·ªôt m√°y t√≠nh c≈©ng th·∫•y ng·∫ßu h∆°n!`,
        n => `${n} n√≥i m·ªôt c√¢u, tr√¨nh duy·ªát tƒÉng th√™m 10 FPS!`,
        n => `Ng√†y c·ªßa ${n} s√°ng nh∆∞ m√†n h√¨nh 4K b·∫≠t HDR!`,
      ];
      return templates[Math.floor(Math.random()*templates.length)](name);
    }

    async function generate(name){
      const resBox = document.getElementById('res');
      resBox.textContent = 'ƒêang t·∫°o...';

      // N·∫øu c√≥ endpoint AI trong config.js th√¨ g·ªçi, kh√¥ng th√¨ d√πng local
      if (window.CONFIG && window.CONFIG.AI_ENDPOINT) {
        try{
          const r = await fetch(window.CONFIG.AI_ENDPOINT, {
            method:'POST',
            headers:{'Content-Type':'application/json'},
            body: JSON.stringify({ name })
          });
          const j = await r.json();
          if (r.ok && j.text) return j.text;
          return localSafeLine(name);
        }catch(e){
          return localSafeLine(name);
        }
      } else {
        return localSafeLine(name);
      }
    }

    document.getElementById('go').addEventListener('click', async ()=>{
      const name = document.getElementById('name').value.trim();
      const resBox = document.getElementById('res');
      if(!name){ resBox.textContent = 'B·∫°n ch∆∞a nh·∫≠p t√™n.'; return; }
      const text = await generate(name);
      resBox.textContent = text;
    });
  </script>
</body>
</html>
